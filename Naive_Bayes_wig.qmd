---
title: "Naive_Bayes"
format: html
editor: visual
---

```{r}
library(stats)
library(e1071)
library(tidyverse)
library(ISLR2)
library(MASS)
library(dplyr)
```

```{r}
wig20 <- read.csv("wig_d.csv")

wig20 <- wig20 %>%
  mutate(
    zwroty = (Zamkniecie - Otwarcie) * 100 / Otwarcie
  ) %>%
  mutate(
    zam1 = lag(Zamkniecie, 1), 
    otw1 = lag(Otwarcie, 1), 
    otw2 = lag(Otwarcie, 2), 
    otw3 = lag(Otwarcie, 3), 
    otw4 = lag(Otwarcie, 4), 
    otw5 = lag(Otwarcie, 5),
    maks1 = lag(Najwyzszy, 1),
    min1 = lag(Najnizszy, 1)
  )

wig20 <- wig20 %>%
  mutate(
    lag1 = (zam1 - otw1) * 100 / otw1,
    lag2 = (zam1 - otw2) * 100 / otw2,
    lag3 = (zam1 - otw3) * 100 / otw3,
    lag4 = (zam1 - otw4) * 100 / otw4,
    lag5 = (zam1 - otw5) * 100 / otw5
  ) %>%
  mutate(
    zmiana = if_else(zwroty > 0, 1, 0)
  )

# Usunięcie pierwszych pięciu wierszy z ramki danych (nie mamy dla nich wszystkich wartości zwrotów)
wig20 <- wig20[-c(1:5), ]

# Konwersja kolumny 'Data' na typ daty
wig20$Data <- as.Date(wig20$Data, format="%Y-%m-%d")
```

Funkcja do testowania

```{r}
alg_test <- function(start_date_tr, end_date_tr, end_date_test, L = c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'lag5', 'maks1', 'min1', 'zmiana')) {
    library(e1071)

#' Algorytm testowania modelu Naive Bayes 
#'
#' @param start_date_tr Data początkowa dla zbioru treningowego (w formacie "YYYY-MM-DD").
#' @param end_date_tr Data końcowa dla zbioru treningowego (w formacie "YYYY-MM-DD").
#' @param end_date_test Data końcowa dla zbioru testowego (w formacie "YYYY-MM-DD").
#' @param L Lista kolumn z danymi, gdzie pierwsza kolumna to data, a ostatnia to zmiana (domyślnie c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'lag5', 'maks1', 'min1', 'zmiana')).
#'
#' @return Lista zawierająca:
#'   - confusion_matrix_train: Macierz pomyłek dla zbioru treningowego.
#'   - accuracy_train: Dokładność dla zbioru treningowego.
#'   - confusion_matrix_test: Macierz pomyłek dla zbioru testowego.
#'   - accuracy_test: Dokładność dla zbioru testowego.


    # Utworzenie zbioru treningowego zawierającego dane przed "2004-12-31"
    train <- subset(wig20, Data >= as.Date(start_date_tr) & Data <= as.Date(end_date_tr), select = L)

    # Utworzenie zbioru testowego zawierającego dane po "2004-12-31" i przed "2005-12-31"
    test <- subset(wig20, Data > as.Date(end_date_tr) & Data <= as.Date(end_date_test), select = L)

    # Wyodrębnienie Y_train i Y_test
    Y_train <- train$zmiana
    Y_test <- test$zmiana

    # Stworzenie formuły do modelu Naive Bayes
    formula_str <- paste("zmiana ~", paste(L[2:(length(L) - 1)], collapse = " + "))
    formula <- as.formula(formula_str)
  
    # Trening modelu Naive Bayes na zbiorze treningowym
    nb_fit <- naiveBayes(formula, data = train)
    
    # Predykcja na zbiorze treningowym
    Y_pred_tr <- predict(nb_fit, train)
    confusion_matrix_tr <- table(Y_pred_tr, Y_train)
    accuracy_tr <- sum(diag(confusion_matrix_tr)) / sum(confusion_matrix_tr)
    
    # Predykcja na zbiorze testowym
    Y_pred <- predict(nb_fit, test)
    confusion_matrix_te <- table(Y_pred, Y_test)
    accuracy_te <- sum(diag(confusion_matrix_te)) / sum(confusion_matrix_te)

    return(list(
        confusion_matrix_train = confusion_matrix_tr,
        accuracy_train = accuracy_tr,
        confusion_matrix_test = confusion_matrix_te,
        accuracy_test = accuracy_te
    ))
}
```

Testujemy rok do przodu

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-12-31', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
#Wypisanie wynikow
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

8 miesięcy do przodu

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-08-31', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

4 miesiące do przodu

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-04-30', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

2 miesiące do przodu

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-02-28', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

Miesiąc do przodu

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-01-31', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

Dwa tygodnie do przodu

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-01-15', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

Sprawdźmy tydzień w przód

```{r}
result <- alg_test('2004-06-20', '2004-12-31', '2005-01-07', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

Dwa tygodnie do przodu udało nam się uzyskać najwyższy wynik predykcji dla zbioru testowego (dla tak wybranych danych treningowych).

Sprawdźmy na innym okresie czasu (zbiór testowy też dwa tygodnie w przód)

```{r}
result <- alg_test('2006-06-20', '2006-12-31', '2007-01-15', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

```{r}
result <- alg_test('2010-06-20', '2010-12-31', '2011-01-15', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```

Trenowanie na połowie danych i testowanie na połowie

```{r}
result <- alg_test('2004-06-20', '2014-06-20', '2024-06-20', c('Data', 'lag1', 'lag2', 'lag3', 'lag4', 'maks1', 'min1', 'zmiana'))
# Wypisanie wyników
print(result$confusion_matrix_train)
print(paste("Accuracy_train:", result$accuracy_train))
print(result$confusion_matrix_test)
print(paste("Accuracy_test:", result$accuracy_test))
```
